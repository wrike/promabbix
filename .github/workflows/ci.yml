name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full git history for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install setuptools-scm

    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov-fail-under=80 --cov=src/promabbix --cov-report=term-missing --cov-report=xml

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full git history for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install setuptools-scm
        pip install flake8 mypy

    - name: Lint with flake8
      run: |
        flake8 src/ --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports

  container-build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full git history for setuptools-scm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image (CI check)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: promabbix:ci
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Validate container help output
      run: |
        echo "Testing container help output..."
        help_output=$(docker run --rm promabbix:ci -h)
        echo "Container help output:"
        echo "$help_output"
        
        # Check for required keywords in help output
        if echo "$help_output" | grep -q "Usage"; then
          echo "✅ Found 'Usage' in help output"
        else
          echo "❌ 'Usage' not found in help output"
          exit 1
        fi
        
        echo "✅ Container validation successful!"

    - name: Validate container help output with a wrapper and a different working dir
      run: |
        echo "Testing container help output with /tmp as a working directory..."
        help_output=$(docker run --rm -w /tmp --entrypoint /bin/bash promabbix:ci promabbix -h)
        echo "Container help output:"
        echo "$help_output"
        
        # Check for required keywords in help output
        if echo "$help_output" | grep -q "Usage"; then
          echo "✅ Found 'Usage' in help output"
        else
          echo "❌ 'Usage' not found in help output"
          exit 1
        fi
        
        echo "✅ Container validation successful!"
